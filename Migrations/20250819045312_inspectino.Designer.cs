// <auto-generated />
using System;
using CarKilometerTrack.AppDbConnect;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarKilometerTrack.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250819045312_inspectino")]
    partial class inspectino
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarKilometerTrack.Model.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InUse")
                        .HasColumnType("bit");

                    b.Property<int?>("InUseUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Inspection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Insurance")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Kilometer")
                        .HasColumnType("int");

                    b.Property<int>("LastMaintenance")
                        .HasColumnType("int");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PeriodicInspection")
                        .HasColumnType("int");

                    b.Property<int>("PeriodicKilometer")
                        .HasColumnType("int");

                    b.Property<string>("UseNote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InUseUserId");

                    b.ToTable("cars");
                });

            modelBuilder.Entity("CarKilometerTrack.Model.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("carId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("carId");

                    b.HasIndex("userId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("CarKilometerTrack.Model.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("carId")
                        .HasColumnType("int");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isRead")
                        .HasColumnType("bit");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("carId");

                    b.HasIndex("userId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("CarKilometerTrack.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CarKilometerTrack.Model.Car", b =>
                {
                    b.HasOne("CarKilometerTrack.Model.User", "InUseUser")
                        .WithMany()
                        .HasForeignKey("InUseUserId");

                    b.Navigation("InUseUser");
                });

            modelBuilder.Entity("CarKilometerTrack.Model.Log", b =>
                {
                    b.HasOne("CarKilometerTrack.Model.Car", "car")
                        .WithMany("Logs")
                        .HasForeignKey("carId");

                    b.HasOne("CarKilometerTrack.Model.User", "user")
                        .WithMany("Logs")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("car");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CarKilometerTrack.Model.Note", b =>
                {
                    b.HasOne("CarKilometerTrack.Model.Car", "car")
                        .WithMany("Notes")
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarKilometerTrack.Model.User", "user")
                        .WithMany("Notes")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("car");

                    b.Navigation("user");
                });

            modelBuilder.Entity("CarKilometerTrack.Model.Car", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("CarKilometerTrack.Model.User", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
